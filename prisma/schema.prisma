generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  username             String         @unique
  password             String
  name                 String?
  bio                  String?
  image                String?
  location             String?
  website              String?
  notificationSettings Json?          @default("{\"likes\": true, \"comments\": true, \"follows\": true, \"mentions\": true}")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  comments             Comment[]
  following            Follows[]      @relation("follower")
  followers            Follows[]      @relation("following")
  likes                Like[]
  notificationsCreated Notification[] @relation("notificationCreator")
  notifications        Notification[] @relation("userNotifications")
  posts                Post[]
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  content       String?
  image         String?        // 保留单图片字段用于向后兼容
  images        String[]       // 新增多图片字段
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId, postId])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator   User             @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
}
